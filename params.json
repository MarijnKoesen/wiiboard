{
  "name": "Wiiboard",
  "tagline": "Wii Fit Balance Board",
  "body": "Wii Fit Balance Board (WBB)\r\n===========================\r\n\r\n*in python*\r\n\r\n```\r\nusage: wiiboard.py [address] 2> wiiboard.log > wiiboard.txt\r\ntip: use `hcitool scan` to get a list of devices addresses\r\n```\r\n\r\nYou only need to install `python-bluez` or `python-bluetooth` package.\r\n\r\nOriginal version from Nedim Jackman in 2008 [based? on \"wiibalancepc\"]:\r\n* https://code.google.com/archive/p/wiiboard-simple/\r\n* http://trackingbalance.blogspot.fr/2008/08/small-milestone.html\r\n\r\nNote to developers\r\n------------------\r\n\r\nwiiboard_simple_src_1.0.0.zip/WiiboardSimple/src/edu/unsw/cse/wiiboard/WiiBoard.java\r\nThe Wii Balance Board is very similar in most hardware properties of the wiimote.\r\nThe force sensing component is treated as an extension to a wiimote.\r\nMost of the implementation details are sourced from the wiibrew project:\r\n* http://wiibrew.org/wiki/Wii_Balance_Board\r\n* http://web.archive.org/http://www.wiili.org/index.php/Wiimote\r\n\r\nChanges from Nedim's version\r\n----------------------------\r\n\r\n* fix Wiiboard.calcMass where `raw == self.calibration[1][pos]` would return 0.0\r\n* add INPUT_STATUS code to get battery level and light status\r\n* store constants in byte to avoid unnecessary conversion\r\n* skip device discovery when passing an address in argument\r\n* add logging (to stderr)\r\n\r\nSince then few other projects using Nedim's code:\r\n* https://www.stavros.io/posts/your-weight-online/\r\n* https://github.com/initialstate/beerfridge\r\n* http://aelveborn.com/Wii-Scale/\r\n\r\nOther wiimote interface / driver:\r\n* https://github.com/abstrakraft/cwiid\r\n* https://github.com/dvdhrm/xwiimote\r\n\r\nKernel bluetooth code (deal with the pairing key since 2012-09-21):\r\n* https://git.kernel.org/cgit/bluetooth/bluez.git/tree/plugins/wiimote.c\r\n\r\n\r\nTODO\r\n----\r\n\r\nPressing the red sync button under the battery cover at each start-up is not\r\nconvinient. We should find a way with DBus to get a socket for paired bluetooth\r\ninput device, in which case one would only have to press the front power button.\r\n\r\n```python\r\nBLUEZ_VERSION = 5\r\ntry: # disconnect paired device with BlueZ API v5+\r\n    logger.debug(\"bluez/test/test-device disconnect %s\", address)\r\n    import dbus\r\n    bus = dbus.SystemBus()\r\n    obj = bus.get_object(\"org.bluez\", \"/\")\r\n    if BLUEZ_VERSION >= 5:\r\n        manager = dbus.Interface(obj, \"org.freedesktop.DBus.ObjectManager\")\r\n        objects = manager.GetManagedObjects()\r\n        for path, ifaces in objects.iteritems():\r\n            device = ifaces.get(\"org.bluez.Device1\")\r\n            if device is not None and device.get(\"Address\") == address:\r\n                obj = bus.get_object(\"org.bluez\", path)\r\n                dev = dbus.Interface(obj, \"org.bluez.Device1\")\r\n                # TODO check how can we get socket out of that\r\n                # see bluez/test/test-profile\r\n                logger.debug(\"  Disconnect %s\", path)\r\n                dev.Disconnect()\r\n    else:\r\n        manager = dbus.Interface(obj, \"org.bluez.Manager\")\r\n        adapter_path = manager.DefaultAdapter()\r\n        obj = bus.get_object(\"org.bluez\", adapter_path)\r\n        adapter = dbus.Interface(obj, \"org.bluez.Adapter\")\r\n        device_path = adapter.FindDevice(address)\r\n        obj = bus.get_object(\"org.bluez\", device_path)\r\n        device = dbus.Interface(obj, \"org.bluez.Device\") # or Input\r\n        device.Disconnect()\r\nexcept Exception as err:\r\n    logger.warning(\"dbus failed: %s\", str(err))\r\n```\r\n\r\nThreading\r\n---------\r\n\r\n*for threaded version use something like*\r\n\r\n```python\r\nimport threading\r\n\r\nclass WiiboardThreaded(Wiiboard):\r\n    def __init__(self, address=None):\r\n        self.thread = threading.Thread(target=self.loop)\r\n        Wiiboard.__init__(self, address)\r\n    def connect(self, address):\r\n        Wiiboard.connect(self, address)\r\n        self.thread.start()\r\n    def spin(self):\r\n        while self.thread.is_alive():\r\n            self.thread.join(1)\r\n```\r\n\r\nCenter of mass\r\n--------------\r\n\r\n```python\r\ndef on_mass(self, mass):\r\n    comx = 1.0\r\n    comy = 1.0\r\n    try:\r\n        total_right  = mass['top_right']   + mass['bottom_right']\r\n        total_left   = mass['top_left']    + mass['bottom_left']\r\n        comx = total_right / total_left\r\n        if comx > 1:\r\n            comx = 1 - total_right / total_left\r\n        else:\r\n            comx -= 1\r\n        total_bottom = mass['bottom_left'] + mass['bottom_right']\r\n        total_top    = mass['top_left']    + mass['top_right']\r\n        comy = total_bottom / total_top\r\n        if comy > 1:\r\n            comy = 1 - total_top / total_bottom\r\n        else:\r\n            comy -= 1\r\n    except:\r\n        pass\r\n    print(\"Center of mass: %s\"%str({'x': comx, 'y': comy}))\r\n    # plot(x,y) using pygame or any other GUI\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}